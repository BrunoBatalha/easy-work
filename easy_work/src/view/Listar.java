package view;

import controller.CursoDao;
import controller.CursoParticipanteDao;
import controller.EventoDao;
import controller.EventoParticipanteDao;
import controller.ParticipanteDao;
import controller.ProjetoDao;
import controller.ProjetoParticipanteDao;
import controller.RelacaoComParticipanteDao;
import java.awt.Color;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Curso;
import model.CursoParticipante;
import model.Evento;
import model.EventoParticipante;
import model.Participante;
import model.Projeto;
import model.ProjetoParticipante;
import model.RelacaoComParticipante;
import outras.util;

public class Listar extends javax.swing.JPanel {

    DefaultTableModel tb;

    public Listar() {
        initComponents();
        configTela();
        configTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     * // @SuppressWarnings("unchecked")
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnAdicionar = new javax.swing.JButton();
        btnMenuPrincipal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtabela = new javax.swing.JTable();
        lbTitulo = new javax.swing.JLabel();
        lbDescricao = new javax.swing.JLabel();
        btnVisualizar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        lbBuscar = new javax.swing.JLabel();
        btnRemover = new javax.swing.JButton();
        btnVerParticipantes = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(5, 103, 49));

        btnAdicionar.setText("Adicionar");
        btnMenuPrincipal.setBackground(Color.WHITE);
        btnMenuPrincipal.setForeground(new Color(16,44,106));
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnMenuPrincipal.setText("Menu Principal");
        btnMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPrincipalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(btnMenuPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 770, Short.MAX_VALUE)
                .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMenuPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jtabela.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        String colunas[] = new String[]{""};

        switch(util.TELA_ATUAL){
            case util.TELA_LS_EVENTOS:{
                colunas = new String[]{"ID","Título", "Responsável", "Descrição",
                    "Data início", "Data fim","Qnt. participantes"};

                break;
            }
            case util.TELA_LS_PARTICIPANTES:{
                colunas = new String[]{"CPF", "Nome", "Formação", "Email",
                    "Endereço","Região","Data de nascimento","Idade"};
                break;
            }
            case util.TELA_LS_TDS_PARTICIPANTES:{
                colunas = new String[]{"CPF", "Nome", "Formação", "Email",
                    "Endereço","Região","Data de nascimento","Idade"};
                break;
            }
            case util.TELA_ADD_PART_EXIST:{
                colunas = new String[]{"CPF", "Nome", "Formação", "Email",
                    "Endereço","Região","Data de nascimento","Idade"};
                break;
            }
            case util.TELA_LS_PROJETOS:{
                colunas = new String[]{"ID","Nome", "Responsável", "Descrição",
                    "Carga horária","Data início", "Data fim","Qnt. participantes"};
                break;
            }
            case util.TELA_LS_CURSOS:{
                colunas = new String[]{"ID","Nome", "Responsável", "Descrição",
                    "Carga horária","Data início", "Data fim","Qnt. participantes"};
                break;
            }
        }

        boolean[] edits = new boolean[colunas.length];
        for(int i=0;i<colunas.length;i++){
            edits[i] = false;
        }
        jtabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            colunas) {
            boolean[] canEdit = edits;

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtabela.setRowHeight(50);
        jtabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtabela.setShowVerticalLines(false);
        jtabela.getTableHeader().setReorderingAllowed(false);
        jtabela.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtabelaFocusGained(evt);
            }
        });
        jtabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtabela);

        lbTitulo.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbTitulo.setForeground(new java.awt.Color(71, 82, 94));
        lbTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitulo.setText("Eventos");

        lbDescricao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbDescricao.setForeground(new java.awt.Color(71, 82, 94));
        lbDescricao.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDescricao.setText("Visualize aqui os eventos criados");

        btnVisualizar.setText("Visualizar");
        btnVisualizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnVisualizarFocusGained(evt);
            }
        });
        btnVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarActionPerformed(evt);
            }
        });

        txtBuscar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarFocusGained(evt);
            }
        });
        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        lbBuscar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbBuscar.setText("Buscar por nome:");

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnVerParticipantes.setText("Ver participantes");
        btnVerParticipantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerParticipantesActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel5.setForeground(java.awt.Color.lightGray);
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("EASY WORK");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnVerParticipantes, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnVisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(372, 372, 372))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jLabel5)
                .addGap(55, 55, 55)
                .addComponent(lbTitulo)
                .addGap(33, 33, 33)
                .addComponent(lbDescricao)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbBuscar)
                    .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerParticipantes, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        adicionar();
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void jtabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtabelaMouseClicked
        //cliqueTabela();
        switch (util.TELA_ATUAL) {
            case util.TELA_ADD_PART_EXIST: {
                Object[] ops = {"Sim", "Não"};
                int val = opcoes("Adicionar este participante?", ops);
                if (val == 0) {
                    int row = jtabela.getSelectedRow();
                    String cpfSel = (String) jtabela.getValueAt(row, 0);
                    gerenciarAddParticipante(cpfSel);
                }
                break;
            }
            case util.TELA_LS_PARTICIPANTES: {
                btnVisualizar.setEnabled(true);
                break;
            }
            case util.TELA_LS_TDS_PARTICIPANTES: {
                btnVisualizar.setEnabled(true);
                break;
            }
        }
    }//GEN-LAST:event_jtabelaMouseClicked

    private void btnMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPrincipalActionPerformed
        switch (util.TELA_ANTERIOR) {
            case util.TELA_LS_CURSOS: {
                util.TELA_ANTERIOR = util.TELA_MENU;
                util.TELA_ATUAL = util.TELA_LS_CURSOS;
                util.trocarTela(this, new Listar());
                break;
            }
            case util.TELA_LS_EVENTOS: {
                util.TELA_ANTERIOR = util.TELA_MENU;
                util.TELA_ATUAL = util.TELA_LS_EVENTOS;
                util.trocarTela(this, new Listar());
                break;
            }
            case util.TELA_LS_PROJETOS: {
                util.TELA_ANTERIOR = util.TELA_MENU;
                util.TELA_ATUAL = util.TELA_LS_PROJETOS;
                util.trocarTela(this, new Listar());
                break;
            }
            default: {
                util.trocarTela(this, new MenuPrincipal());
                break;
            }
        }
    }//GEN-LAST:event_btnMenuPrincipalActionPerformed

    private void btnVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarActionPerformed
        visualizar();
    }//GEN-LAST:event_btnVisualizarActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        ParticipanteDao dao = new ParticipanteDao();

        try {
            List<Participante> x = dao.pesquisarVariosNomes(txtBuscar.getText());
            if (x != null) {
                exibeTabPartPesquisados(x);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Listar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        try {
            remover();
        } catch (SQLException ex) {
            Logger.getLogger(Listar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnVisualizarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnVisualizarFocusGained
        btnVisualizar.setEnabled(true);
    }//GEN-LAST:event_btnVisualizarFocusGained

    private void jtabelaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtabelaFocusGained
        btnVisualizar.setEnabled(true);
        btnVerParticipantes.setEnabled(true);
        btnRemover.setEnabled(true);
    }//GEN-LAST:event_jtabelaFocusGained

    private void txtBuscarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarFocusGained
        btnVisualizar.setEnabled(false);
    }//GEN-LAST:event_txtBuscarFocusGained

    private void btnVerParticipantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerParticipantesActionPerformed
        verParticipantes();
    }//GEN-LAST:event_btnVerParticipantesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnMenuPrincipal;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnVerParticipantes;
    private javax.swing.JButton btnVisualizar;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtabela;
    private javax.swing.JLabel lbBuscar;
    private javax.swing.JLabel lbDescricao;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    /*Meus métodos*/
    private void configTela() {
        switch (util.TELA_ATUAL) {
            case util.TELA_LS_PARTICIPANTES: {
                btnVisualizar.setVisible(true);
                btnVisualizar.setEnabled(false);
                btnRemover.setEnabled(false);
                lbBuscar.setVisible(false);
                txtBuscar.setVisible(false);
                btnMenuPrincipal.setText("Voltar");
                btnVerParticipantes.setVisible(false);
                break;
            }
            case util.TELA_LS_TDS_PARTICIPANTES: {
                btnVisualizar.setVisible(true);
                btnVisualizar.setEnabled(false);
                btnAdicionar.setVisible(false);
                btnRemover.setVisible(false);
                lbBuscar.setVisible(true);
                txtBuscar.setVisible(true);
                btnMenuPrincipal.setText("Menu Principal");
                btnVerParticipantes.setVisible(false);
                break;
            }
            case util.TELA_ADD_PART_EXIST: {
                lbBuscar.setVisible(true);
                txtBuscar.setVisible(true);
                btnRemover.setVisible(false);
                btnVerParticipantes.setVisible(false);
                break;
            }
            default: {
                btnVisualizar.setVisible(false);
                btnVisualizar.setEnabled(false);
                btnVerParticipantes.setEnabled(false);
                btnRemover.setEnabled(false);
                lbBuscar.setVisible(false);
                txtBuscar.setVisible(false);
                btnVerParticipantes.setVisible(true);
                btnMenuPrincipal.setText("Menu Principal");
                break;
            }
        }
    }

    private void configTabela() {
        jtabela.setRowHeight(30);
        tb = (DefaultTableModel) jtabela.getModel();
        jtabela.setRowSorter(new TableRowSorter(tb));
        try {
            switch (util.TELA_ATUAL) {
                case util.TELA_LS_EVENTOS: {
                    exibeTabEvento();
                    break;
                }
                case util.TELA_LS_PARTICIPANTES: {
                    gerenciaLsParticipante();
                    break;
                }
                case util.TELA_LS_CURSOS: {
                    exibeTabCurso();
                    break;
                }
                case util.TELA_LS_PROJETOS: {
                    exibeTabProjeto();
                    break;
                }
                case util.TELA_LS_TDS_PARTICIPANTES: {
                    lbTitulo.setText("Todos os participantes");
                    lbDescricao.setText("Visualize aqui todos os participantes");
                    exibeTabTdsParticipantes();
                    break;
                }
                case util.TELA_ADD_PART_EXIST: {
                    lbTitulo.setText("Todos os participantes");
                    lbDescricao.setText("Selecione o participante que deseja adicionar");
                    exibeTabPartNaoExistente();
                    break;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Listar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void verParticipantes() {
        switch (util.TELA_ATUAL) {
            case util.TELA_ADD_PART_EXIST: {
                int row = jtabela.getSelectedRow();
                String cpfSel = (String) jtabela.getValueAt(row, 0);
                gerenciarAddParticipante(cpfSel);
                break;
            }
            case util.TELA_LS_EVENTOS: {
                util.TELA_ANTERIOR = util.TELA_ATUAL;
                util.TELA_ATUAL = util.TELA_LS_PARTICIPANTES;
                int row = jtabela.getSelectedRow();
                util.tipoId = util.ID_EVENTO;
                util.idSelecionado = (Integer) jtabela.getValueAt(row, 0);
                util.trocarTela(this, new Listar());
                break;
            }
            case util.TELA_LS_CURSOS: {
                util.TELA_ANTERIOR = util.TELA_ATUAL;
                util.TELA_ATUAL = util.TELA_LS_PARTICIPANTES;
                int row = jtabela.getSelectedRow();
                util.tipoId = util.ID_CURSO;
                util.idSelecionado = (Integer) jtabela.getValueAt(row, 0);
                util.trocarTela(this, new Listar());
                break;
            }
            case util.TELA_LS_PROJETOS: {
                util.TELA_ANTERIOR = util.TELA_ATUAL;
                util.TELA_ATUAL = util.TELA_LS_PARTICIPANTES;
                int row = jtabela.getSelectedRow();
                util.tipoId = util.ID_PROJETO;
                util.idSelecionado = (Integer) jtabela.getValueAt(row, 0);
                util.trocarTela(this, new Listar());
                break;
            }
            case util.TELA_LS_PARTICIPANTES: {
                btnVisualizar.setEnabled(true);
                break;
            }
            case util.TELA_LS_TDS_PARTICIPANTES: {
                btnVisualizar.setEnabled(true);
                break;
            }
        }
    }

    private void remover() throws SQLException {
        RelacaoComParticipanteDao r;
        int row = jtabela.getSelectedRow();
        Integer id = null;
        String cpf = null;
        if (util.TELA_ATUAL == util.TELA_LS_PARTICIPANTES) {
            cpf = (String) jtabela.getValueAt(row, 0);
        } else {
            id = (Integer) jtabela.getValueAt(row, 0);
        }

        String titulo = (String) jtabela.getValueAt(row, 1);
        Object[] ops = {"Sim", "Não"};
        int val = opcoes("Realmente deseja remover: \"" + titulo + "\"", ops);
        if (val == 0) {
            switch (util.TELA_ATUAL) {
                case util.TELA_LS_EVENTOS: {
                    EventoDao dao = new EventoDao();
                    r = new EventoParticipanteDao();
                    List<RelacaoComParticipante> lsEvP = r.pesquisarId(id);
                    for (RelacaoComParticipante rp : lsEvP) {
                        r.remover(rp.getId(), rp.getCpfParticipante());
                    }
                    if (dao.remover(id)) {
                        JOptionPane.showMessageDialog(this, "Evento removido com sucesso");
                        util.trocarTela(this, new Listar());
                    }
                    break;
                }
                case util.TELA_LS_PARTICIPANTES: {
                    removerRelacao(cpf);
                    break;
                }
                case util.TELA_LS_PROJETOS: {
                    ProjetoDao dao = new ProjetoDao();
                    r = new ProjetoParticipanteDao();
                    List<RelacaoComParticipante> lsEvP = r.pesquisarId(id);
                    for (RelacaoComParticipante rp : lsEvP) {
                        r.remover(rp.getId(), rp.getCpfParticipante());
                    }
                    if (dao.remover(id)) {
                        JOptionPane.showMessageDialog(this, "Projeto removido com sucesso");
                        util.trocarTela(this, new Listar());
                    }
                    break;
                }
                case util.TELA_LS_CURSOS: {
                    CursoDao dao = new CursoDao();
                    r = new ProjetoParticipanteDao();
                    List<RelacaoComParticipante> lsEvP = r.pesquisarId(id);
                    for (RelacaoComParticipante rp : lsEvP) {
                        r.remover(rp.getId(), rp.getCpfParticipante());
                    }
                    if (dao.remover(id)) {
                        JOptionPane.showMessageDialog(this, "Curso removido com sucesso");
                        util.trocarTela(this, new Listar());
                    }
                    break;
                }
            }
        }
    }

    private void removerRelacao(String cpf) throws SQLException {
        RelacaoComParticipanteDao dao;
        switch (util.tipoId) {
            case util.ID_CURSO: {
                dao = new CursoParticipanteDao();
                if (dao.remover(util.idSelecionado, cpf)) {
                    JOptionPane.showMessageDialog(this, "Participante removido do curso com sucesso!");
                    util.trocarTela(this, new Listar());
                }
                break;
            }
            case util.ID_EVENTO: {
                dao = new EventoParticipanteDao();
                if (dao.remover(util.idSelecionado, cpf)) {
                    JOptionPane.showMessageDialog(this, "Participante removido do evento com sucesso!");
                    util.trocarTela(this, new Listar());
                }
                break;
            }
            case util.ID_PROJETO: {
                dao = new EventoParticipanteDao();
                if (dao.remover(util.idSelecionado, cpf)) {
                    JOptionPane.showMessageDialog(this, "Participante removido do projeto com sucesso!");
                    util.trocarTela(this, new Listar());
                }
                break;
            }
        }
    }

    private void adicionar() {
        switch (util.TELA_ATUAL) {
            case util.TELA_LS_EVENTOS: {
                util.trocarTela(this, new CadastroEvento());
                break;
            }
            case util.TELA_LS_PARTICIPANTES: {
                util.trocarTela(this, new CadastroParticipante());
                break;
            }
            case util.TELA_LS_PROJETOS: {
                util.TELA_ATUAL = util.TELA_CAD_PROJETO;
                util.trocarTela(this, new CadastroCurso());
                break;
            }
            case util.TELA_LS_CURSOS: {
                util.TELA_ATUAL = util.TELA_CAD_CURSO;
                util.trocarTela(this, new CadastroCurso());
                break;
            }
        }
    }

    private void gerenciaLsParticipante() throws SQLException {
        switch (util.tipoId) {
            case util.ID_CURSO: {
                lbTitulo.setText("Participantes");
                lbDescricao.setText("Visualize aqui os participantes do curso");
                exibeTabParticipante(new CursoParticipanteDao());
                break;
            }
            case util.ID_EVENTO: {
                lbTitulo.setText("Participantes");
                lbDescricao.setText("Visualize aqui os participantes do evento");
                exibeTabParticipante(new EventoParticipanteDao());
                break;
            }
            case util.ID_PROJETO: {
                lbTitulo.setText("Participantes");
                lbDescricao.setText("Visualize aqui os participantes do projeto");
                exibeTabParticipante(new ProjetoParticipanteDao());
                break;
            }
        }
    }

    private void gerenciarAddParticipante(String cpf) {
        try {
            switch (util.tipoId) {
                case util.ID_CURSO: {
                    addEmCurso(cpf);
                    JOptionPane.showMessageDialog(this, "Participante adicionado com sucesso!");
                    break;
                }
                case util.ID_EVENTO: {
                    addEmEvento(cpf);
                    JOptionPane.showMessageDialog(this, "Participante adicionado com sucesso!");
                    break;
                }
                case util.ID_PROJETO: {
                    addEmProjeto(cpf);
                    JOptionPane.showMessageDialog(this, "Participante adicionado com sucesso!");
                    break;
                }
            }
            util.trocarTela(this, new Listar());
        } catch (SQLException ex) {
            Logger.getLogger(Listar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addEmEvento(String cpf) throws SQLException {
        EventoParticipante evp = new EventoParticipante(util.idSelecionado, cpf);
        EventoParticipanteDao evpao = new EventoParticipanteDao();
        evpao.adicionar(evp);
    }

    private void addEmCurso(String cpf) throws SQLException {
        CursoParticipante cp = new CursoParticipante(util.idSelecionado, cpf);
        CursoParticipanteDao cpdao = new CursoParticipanteDao();
        cpdao.adicionar(cp);
    }

    private void addEmProjeto(String cpf) throws SQLException {
        ProjetoParticipante pp = new ProjetoParticipante(util.idSelecionado, cpf);
        ProjetoParticipanteDao ppdao = new ProjetoParticipanteDao();
        ppdao.adicionar(pp);
    }

    private void exibeTabEvento() throws SQLException {
        lbTitulo.setText("Eventos");
        lbDescricao.setText("Visualize aqui os eventos criados");
        EventoDao eveDao = new EventoDao();

        for (Evento v : eveDao.getLista()) {
            List<RelacaoComParticipante> lsParts = new EventoParticipanteDao().pesquisarId(v.getId());
            int qntParts = lsParts.size();
            Object ob[] = {v.getId(), v.getTitulo(), v.getResponsavel(),
                v.getDescricao(), util.formatarData(v.getDataInicio()),
                util.formatarData(v.getDataFim()), qntParts};
            tb.addRow(ob);
        }
    }

    private void exibeTabParticipante(RelacaoComParticipanteDao dao) throws SQLException {
        ParticipanteDao pdao = new ParticipanteDao();
        List<RelacaoComParticipante> lsEvp = dao.pesquisarId(util.idSelecionado);
        for (RelacaoComParticipante e : lsEvp) {
            Participante p = pdao.pesquisarCpf(e.getCpfParticipante());
            long dtNasc = p.getDataNascimento().getTime();
            long dtAtual = util.getDataAtual();
            String idade = util.calcularIdade(dtAtual, dtNasc) + " anos";
            Object ob[] = {p.getCpf(), p.getNome(), p.getEmail(),
                p.getFormacao(), p.getEndereco(), p.getRegiao(),
                util.formatarData(p.getDataNascimento()), idade};
            tb.addRow(ob);
        }
    }

    private void exibeTabTdsParticipantes() throws SQLException {
        ParticipanteDao pdao = new ParticipanteDao();
        for (Participante p : pdao.getLista()) {
            long dtNasc = p.getDataNascimento().getTime();
            long dtAtual = util.getDataAtual();
            String idade = util.calcularIdade(dtAtual, dtNasc) + " anos";
            Object ob[] = {p.getCpf(), p.getNome(), p.getEmail(),
                p.getFormacao(), p.getEndereco(), p.getRegiao(),
                util.formatarData(p.getDataNascimento()), idade};
            tb.addRow(ob);
        }
    }

    private void exibeTabPartNaoExistente() throws SQLException {
        RelacaoComParticipanteDao dao;
        ParticipanteDao pdao = new ParticipanteDao();
        RelacaoComParticipante r = null;
        for (Participante p : pdao.getLista()) {
            long dtNasc = p.getDataNascimento().getTime();
            long dtAtual = util.getDataAtual();
            String idade = util.calcularIdade(dtAtual, dtNasc) + " anos";
            Object ob[] = {p.getCpf(), p.getNome(), p.getEmail(),
                p.getFormacao(), p.getEndereco(), p.getRegiao(),
                util.formatarData(p.getDataNascimento()), idade};

            switch (util.tipoId) {
                case util.ID_CURSO: {
                    dao = new CursoParticipanteDao();
                    r = dao.pesquisar(util.idSelecionado, p.getCpf());
                    break;
                }
                case util.ID_EVENTO: {
                    dao = new EventoParticipanteDao();
                    r = dao.pesquisar(util.idSelecionado, p.getCpf());
                    break;
                }
                case util.ID_PROJETO: {
                    dao = new ProjetoParticipanteDao();
                    r = dao.pesquisar(util.idSelecionado, p.getCpf());
                    break;
                }
            }
            if (r == null) {
                tb.addRow(ob);
            }
        }

    }

    private void exibeTabCurso() throws SQLException {
        lbTitulo.setText("Cursos");
        lbDescricao.setText("Visualize aqui os cursos criados");
        CursoDao cdao = new CursoDao();

        for (Curso x : cdao.getLista()) {
            List<RelacaoComParticipante> lsParts = new CursoParticipanteDao().pesquisarId(x.getId());
            int qntParts = lsParts.size();
            Object ob[] = {x.getId(), x.getNome(), x.getResponsavel(), x.getDescricao(),
                x.getCargaHoraria(), util.formatarData(x.getDataInicio()),
                util.formatarData(x.getDataFim()), qntParts};
            tb.addRow(ob);
        }
    }

    private void exibeTabProjeto() throws SQLException {
        lbTitulo.setText("Projetos");
        lbDescricao.setText("Visualize aqui os projetos criados");
        ProjetoDao pdao = new ProjetoDao();

        for (Projeto x : pdao.getLista()) {
            List<RelacaoComParticipante> lsParts = new ProjetoParticipanteDao().pesquisarId(x.getId());
            int qntParts = lsParts.size();
            Object ob[] = {x.getId(), x.getNome(), x.getResponsavel(), x.getDescricao(),
                x.getCargaHoraria(), util.formatarData(x.getDataInicio()),
                util.formatarData(x.getDataFim()), qntParts};
            tb.addRow(ob);
        }
    }

    private void exibeTabPartPesquisados(List<Participante> x) {
        tb.setRowCount(0);
        for (Participante p : x) {
            long dtNasc = p.getDataNascimento().getTime();
            long dtAtual = util.getDataAtual();
            String idade = util.calcularIdade(dtAtual, dtNasc) + " anos";
            Object ob[] = {p.getCpf(), p.getNome(), p.getEmail(),
                p.getFormacao(), p.getEndereco(), p.getRegiao(),
                util.formatarData(p.getDataNascimento()), idade};
            tb.addRow(ob);
        }
    }

    private void visualizar() {
        VisualizarParticipante vp = new VisualizarParticipante(null, true);
        int row = jtabela.getSelectedRow();
        String CPFselecionado = (String) jtabela.getValueAt(row, 0);
        vp.setCPF(CPFselecionado);
        vp.exibir();
    }

    private int opcoes(String descricao, Object[] ops) {
        return JOptionPane.showOptionDialog(null,
                descricao,
                "Informação", JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, ops, ops[0]);

    }
}

/*
    private void cliqueTabela() {
        switch (util.TELA_ATUAL) {
            case util.TELA_ADD_PART_EXIST: {
                Object[] ops = {"Sim", "Não"};
                int val = opcoes("Adicionar este participante?", ops);
                if (val == 0) {
                    int row = jtabela.getSelectedRow();
                    String cpfSel = (String) jtabela.getValueAt(row, 0);
                    gerenciarAddParticipante(cpfSel);
                }
                break;
            }
            case util.TELA_LS_EVENTOS: {
                Object[] options = {"Ver participantes", "Remover", "Editar"};
                int val = opcoes("Deseja visualizar todos os participantes deste evento?", options);
                if (val == 0) {
                    util.TELA_ANTERIOR = util.TELA_ATUAL;
                    util.TELA_ATUAL = util.TELA_LS_PARTICIPANTES;
                    int row = jtabela.getSelectedRow();
                    util.tipoId = util.ID_EVENTO;
                    util.idSelecionado = (Integer) jtabela.getValueAt(row, 0);
                    util.trocarTela(this, new Listar());
                }
                break;
            }
            case util.TELA_LS_CURSOS: {
                Object[] options = {"Sim", "Não"};
                int val = opcoes("Deseja visualizar todos os participantes deste curso?", options);
                if (val == 0) {
                    util.TELA_ANTERIOR = util.TELA_ATUAL;
                    util.TELA_ATUAL = util.TELA_LS_PARTICIPANTES;
                    int row = jtabela.getSelectedRow();
                    util.tipoId = util.ID_CURSO;
                    util.idSelecionado = (Integer) jtabela.getValueAt(row, 0);
                    util.trocarTela(this, new Listar());
                }
                break;
            }
            case util.TELA_LS_PROJETOS: {
                Object[] options = {"Sim", "Não"};
                int val = opcoes("Deseja visualizar todos os participantes deste projeto?", options);
                if (val == 0) {
                    util.TELA_ANTERIOR = util.TELA_ATUAL;
                    util.TELA_ATUAL = util.TELA_LS_PARTICIPANTES;
                    int row = jtabela.getSelectedRow();
                    util.tipoId = util.ID_PROJETO;
                    util.idSelecionado = (Integer) jtabela.getValueAt(row, 0);
                    util.trocarTela(this, new Listar());
                }
                break;
            }
            case util.TELA_LS_PARTICIPANTES: {
                btnVisualizar.setEnabled(true);
                break;
            }
            case util.TELA_LS_TDS_PARTICIPANTES: {
                btnVisualizar.setEnabled(true);
                break;
            }
        }
    }
 */
